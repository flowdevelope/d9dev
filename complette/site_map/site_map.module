<?php

use Drupal\geocoder\Entity\GeocoderProvider;

/**
 * Implements hook_theme().
 */
function site_map_theme($existing, $type, $theme, $path) {

  return array(
    'paragraph__map' => array(
      'render element' => 'elements',
      'template' => 'paragraph--map',
      'base hook' => 'paragraph',
      'path' => drupal_get_path('module', 'site_map').'/templates/',
    ),
  );

}

/**
 * Implements hook_preprocess().
 */
function site_map_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];
  if($paragraph->bundle() == 'map') {

    $defaultstyle ='[
			{
				stylers: [
					{ hue: "" },
					{ saturation: 300}
				]
			},{
				featureType: "all",
				stylers: [
					{saturation: -100},
					{gamma: 0.70}
				]
			},{
				featureType: "road",
				elementType: "labels",
				stylers: [
					{ visibility: "off" }
				]
			}
		]';
    $defaultmarker = 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png';

    if ($paragraph->hasField('field_map_adresse')) {
      $address = $paragraph->get('field_map_adresse')->getValue();
      if (!empty($address[0]['value'])) {
        $address = explode(PHP_EOL, $address[0]['value']);
        array_walk($address, function(&$v){
          $v = trim($v);
        });

        $geocoder = GeocoderProvider::loadMultiple();
        /** @var \Geocoder\Provider\GoogleMaps\Model\GoogleAddress $gAddress */
        $gAddress = \Drupal::service('geocoder')->geocode(implode(', ', $address), $geocoder);
        if (!empty($gAddress)) {
          $variables['#attached']['drupalSettings']['site_map']['coordinates'] = $gAddress->get(0)->getCoordinates()->toArray();
          $variables['#attached']['drupalSettings']['site_map']['address'] = $address;
        }
      }
    }

    if ($paragraph->hasField('field_mapstyle')) {
      $style = $paragraph->get('field_mapstyle')->getValue();
      if (!empty($style[0]['value'])) {
        $variables['style'] = $style[0]['value'];
      } else {
        $variables['style'] = $defaultstyle;
      }

      $variables['#attached']['drupalSettings']['site_map']['style'] = $variables['style'];
    }

    if ($paragraph->hasField('field_marker')) {
      if ($paragraph->field_marker->isEmpty() == FALSE) {
        $marker = $paragraph->get('field_marker')->entity->url();;
        $variables['marker'] = $marker;
      } else {
        $variables['marker'] = $defaultmarker;
      }
      $variables['#attached']['drupalSettings']['site_map']['marker'] = $variables['marker'];
    }
  }

}

function site_map_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'site_map/googleapi';
}

function site_map_library_info_build() {

  $geocoder = GeocoderProvider::loadMultiple();

  if (!empty($geocoder['googlemaps']) && !empty($geocoder['googlemaps']->get('configuration')['apiKey'])) {
    $libs = [];
    $libs['googleapi'] = [
      'js' => [
        '//maps.googleapis.com/maps/api/js?key=' . $geocoder['googlemaps']->get('configuration')['apiKey'] =>
          [
            'external' => TRUE,
          ],
      ],
    ];
  }

  return $libs;
}
